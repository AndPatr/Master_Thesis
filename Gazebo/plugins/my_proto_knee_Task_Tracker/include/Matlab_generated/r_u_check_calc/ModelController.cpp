//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: ModelController.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 06-Aug-2021 12:47:14
//

// Include Files
#include "ModelController.h"
#include <algorithm>
#include <cmath>

// Function Definitions
//
// Arguments    : void
// Return Type  : void
//
ModelController::ModelController()
{
  static const double dv[15]{0.06,
                             0.128,
                             0.22749999999999998,
                             0.118,
                             0.0363,
                             0.3,
                             0.29484,
                             0.165888,
                             0.152928,
                             10.0,
                             0.001,
                             0.0050866042499999988,
                             0.000905969664,
                             0.00070978982399999991,
                             0.1};
  static const double dv1[7]{20.0,
                             0.0,
                             0.0,
                             0.0,
                             1.6406094968746698,
                             0.29575137404340573,
                             0.28873817557208159};
  static const double dv2[7]{
      0.1, 0.145, 0.236, 0.256, 0.355, 0.78539816339744828, 2.5132741228718345};
  int i;
  for (i = 0; i < 7; i++) {
    this->robot_knee_el_par[i] = dv1[i];
  }
  std::copy(&dv[0], &dv[15], &this->robot_inertial_par[0]);
  for (i = 0; i < 7; i++) {
    this->robot_dim[i] = dv2[i];
  }
  this->g = 9.81;
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::~ModelController()
{
  // (no terminate code required)
}

//
// R_U_CHECK_CALC
//     R_U_CHECK =
//     R_U_CHECK_CALC(ALPHA,ALPHA0,BETA0,BETA,BETA_DOT,G,GAMMA0,GAMMA,H1,H2,K1T,K2T,K3T,K4T,L_A,L_D,L_CM_C,L_CM_D,L_CM_AH,L_CM_BODY,L_H,M_AH,M_C,M_BODY,M_D,PHI_R,PHI_R_DOT,THETA_ST,THETA_ST_BODY)
//
// Arguments    : double alpha
//                double b_gamma
//                double h1
//                double h2
//                double phi_r
//                double beta
//                double phi_r_dot
//                double beta_dot
//                double r_u_check[2]
// Return Type  : void
//
void ModelController::r_u_check_calc(double alpha, double b_gamma, double h1,
                                     double h2, double phi_r, double beta,
                                     double phi_r_dot, double beta_dot,
                                     double r_u_check[2])
{
  double b_r_u_check_tmp;
  double c_r_u_check_tmp;
  double d_r_u_check_tmp;
  double e_r_u_check_tmp;
  double f_r_u_check_tmp;
  double g_r_u_check_tmp;
  double h_r_u_check_tmp;
  double i_r_u_check_tmp;
  double j_r_u_check_tmp;
  double k_r_u_check_tmp;
  double r_u_check_tmp;
  double t14;
  double t15;
  double t16;
  double t19;
  double t20;
  double t25_tmp;
  double t25_tmp_tmp;
  double t26_tmp;
  double t26_tmp_tmp;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     29-Jul-2021 16:01:07
  t4 = beta_dot * beta_dot;
  t5 = h1 * h1;
  t6 = h2 * h2;
  t7 = phi_r_dot * phi_r_dot;
  t8 = std::cos(alpha + b_gamma);
  t9 = std::sin(alpha + beta);
  t14 = std::cos((beta + this->robot_dim[5]) + this->robot_dim[6]);
  t15 = std::cos((b_gamma + phi_r) + this->robot_dim[5]);
  t16 = std::sin((beta + phi_r) + this->robot_dim[5]);
  t19 = std::cos((-alpha + this->robot_dim[5]) + this->robot_dim[6]);
  t20 = std::sin((phi_r + -alpha) + this->robot_dim[5]);
  t25_tmp_tmp =
      this->robot_dim[3] * this->robot_dim[4] * this->robot_inertial_par[9];
  t25_tmp = t25_tmp_tmp * t4;
  t26_tmp_tmp = this->robot_inertial_par[1] * this->robot_dim[4] *
                this->robot_inertial_par[7];
  t26_tmp = t26_tmp_tmp * t4;
  r_u_check_tmp = this->g * this->robot_dim[4];
  b_r_u_check_tmp = this->robot_dim[0] * this->robot_inertial_par[3] *
                    this->robot_inertial_par[8] * t4;
  c_r_u_check_tmp = this->robot_inertial_par[3] * this->robot_dim[4] *
                    this->robot_inertial_par[8] * t4;
  d_r_u_check_tmp = beta_dot * this->robot_dim[3];
  e_r_u_check_tmp = beta_dot * h1;
  f_r_u_check_tmp = beta_dot * h2;
  g_r_u_check_tmp =
      ((-(this->g * this->robot_dim[3] * this->robot_inertial_par[9] * t16) +
        -(this->g * this->robot_inertial_par[1] * this->robot_inertial_par[7] *
          t16 * 2.0)) +
       t25_tmp * t5 * t9) +
      t26_tmp * t5 * t9 * 2.0;
  h_r_u_check_tmp = this->robot_dim[3] * this->robot_inertial_par[4] *
                    this->robot_inertial_par[9];
  r_u_check[0] =
      (((((((((((((((((((((((g_r_u_check_tmp + this->g * this->robot_dim[0] *
                                                   this->robot_inertial_par[8] *
                                                   t20 * 2.0) +
                            this->g * this->robot_inertial_par[2] *
                                this->robot_inertial_par[6] * t20 * 2.0) -
                           this->g * this->robot_inertial_par[3] *
                               this->robot_inertial_par[8] * t15 * 2.0) +
                          r_u_check_tmp * this->robot_inertial_par[8] * t20 *
                              2.0) +
                         r_u_check_tmp * this->robot_inertial_par[9] * t20) +
                        r_u_check_tmp * this->robot_inertial_par[7] * t20 *
                            2.0) +
                       this->g * this->robot_inertial_par[4] *
                           this->robot_inertial_par[9] *
                           std::cos(phi_r - this->robot_dim[6])) +
                      h_r_u_check_tmp * t4 * t14) -
                     t25_tmp * t9) -
                    t26_tmp * t9 * 2.0) +
                   b_r_u_check_tmp * t5 * t8 * 2.0) -
                  b_r_u_check_tmp * t6 * t8 * 2.0) +
                 c_r_u_check_tmp * t5 * t8 * 2.0) -
                c_r_u_check_tmp * t6 * t8 * 2.0) -
               this->robot_inertial_par[4] * this->robot_dim[4] *
                   this->robot_inertial_par[9] * t4 * t5 * t19) +
              d_r_u_check_tmp * this->robot_inertial_par[4] *
                  this->robot_inertial_par[9] * phi_r_dot * t14 * 2.0) -
             d_r_u_check_tmp * this->robot_dim[4] *
                 this->robot_inertial_par[9] * phi_r_dot * t9 * 2.0) -
            beta_dot * this->robot_inertial_par[1] * this->robot_dim[4] *
                this->robot_inertial_par[7] * phi_r_dot * t9 * 4.0) -
           e_r_u_check_tmp * this->robot_dim[0] * this->robot_inertial_par[3] *
               this->robot_inertial_par[8] * phi_r_dot * t8 * 4.0) -
          f_r_u_check_tmp * this->robot_dim[0] * this->robot_inertial_par[3] *
              this->robot_inertial_par[8] * phi_r_dot * t8 * 4.0) -
         e_r_u_check_tmp * this->robot_inertial_par[3] * this->robot_dim[4] *
             this->robot_inertial_par[8] * phi_r_dot * t8 * 4.0) -
        f_r_u_check_tmp * this->robot_inertial_par[3] * this->robot_dim[4] *
            this->robot_inertial_par[8] * phi_r_dot * t8 * 4.0) -
       e_r_u_check_tmp * this->robot_dim[3] * this->robot_dim[4] *
           this->robot_inertial_par[9] * phi_r_dot * t9 * 2.0) +
      (e_r_u_check_tmp * this->robot_inertial_par[1] * this->robot_dim[4] *
           this->robot_inertial_par[7] * phi_r_dot * t9 * -4.0 +
       e_r_u_check_tmp * this->robot_inertial_par[4] * this->robot_dim[4] *
           this->robot_inertial_par[9] * phi_r_dot * t19 * 2.0);
  r_u_check_tmp = alpha * h1;
  b_r_u_check_tmp = this->robot_knee_el_par[5] * h1;
  c_r_u_check_tmp = this->robot_knee_el_par[6] * h2;
  d_r_u_check_tmp = b_gamma * h2;
  e_r_u_check_tmp = this->g * h1;
  f_r_u_check_tmp = e_r_u_check_tmp * this->robot_dim[4];
  t16 = h1 * this->robot_dim[3] * this->robot_dim[4] *
        this->robot_inertial_par[9];
  t25_tmp = h1 * this->robot_inertial_par[1] * this->robot_dim[4] *
            this->robot_inertial_par[7];
  t26_tmp = h1 * this->robot_dim[0] * this->robot_inertial_par[3] *
            this->robot_inertial_par[8];
  i_r_u_check_tmp = h2 * this->robot_dim[0] * this->robot_inertial_par[3] *
                    this->robot_inertial_par[8];
  j_r_u_check_tmp = h1 * this->robot_inertial_par[3] * this->robot_dim[4] *
                    this->robot_inertial_par[8];
  k_r_u_check_tmp = h2 * this->robot_inertial_par[3] * this->robot_dim[4] *
                    this->robot_inertial_par[8];
  r_u_check[1] =
      (((((((((((((((((((((((((((((((g_r_u_check_tmp -
                                     alpha * this->robot_knee_el_par[1] * 2.0) +
                                    this->robot_knee_el_par[1] *
                                        this->robot_knee_el_par[5] * 2.0) +
                                   this->robot_knee_el_par[1] *
                                       this->robot_knee_el_par[4] * 2.0) +
                                  this->robot_knee_el_par[3] *
                                      this->robot_knee_el_par[4] * 2.0) -
                                 beta * this->robot_knee_el_par[1] * 2.0) -
                                beta * this->robot_knee_el_par[3] * 2.0) -
                               r_u_check_tmp * this->robot_knee_el_par[0] *
                                   2.0) +
                              b_r_u_check_tmp * this->robot_knee_el_par[0] *
                                  2.0) -
                             r_u_check_tmp * this->robot_knee_el_par[1] * 2.0) -
                            alpha * h2 * this->robot_knee_el_par[0] * 2.0) +
                           b_r_u_check_tmp * this->robot_knee_el_par[1] * 2.0) +
                          this->robot_knee_el_par[5] * h2 *
                              this->robot_knee_el_par[0] * 2.0) +
                         this->robot_knee_el_par[4] * h1 *
                             this->robot_knee_el_par[1] * 2.0) -
                        beta * h1 * this->robot_knee_el_par[1] * 2.0) +
                       this->robot_knee_el_par[6] * h1 *
                           this->robot_knee_el_par[0] * 2.0) +
                      c_r_u_check_tmp * this->robot_knee_el_par[0] * 2.0) +
                     c_r_u_check_tmp * this->robot_knee_el_par[2] * 2.0) -
                    b_gamma * h1 * this->robot_knee_el_par[0] * 2.0) -
                   d_r_u_check_tmp * this->robot_knee_el_par[0] * 2.0) -
                  d_r_u_check_tmp * this->robot_knee_el_par[2] * 2.0) -
                 e_r_u_check_tmp * this->robot_dim[0] *
                     this->robot_inertial_par[8] * t20 * 2.0) -
                e_r_u_check_tmp * this->robot_inertial_par[2] *
                    this->robot_inertial_par[6] * t20 * 2.0) -
               this->g * h2 * this->robot_inertial_par[3] *
                   this->robot_inertial_par[8] * t15 * 2.0) -
              f_r_u_check_tmp * this->robot_inertial_par[8] * t20 * 2.0) -
             f_r_u_check_tmp * this->robot_inertial_par[9] * t20) -
            f_r_u_check_tmp * this->robot_inertial_par[7] * t20 * 2.0) -
           h_r_u_check_tmp * t7 * t14) +
          t25_tmp_tmp * t7 * t9) +
         t26_tmp_tmp * t7 * t9 * 2.0) +
        t26_tmp * t7 * t8 * 2.0) +
       i_r_u_check_tmp * t7 * t8 * 2.0) +
      ((((((((((j_r_u_check_tmp * t7 * t8 * 2.0 +
                k_r_u_check_tmp * t7 * t8 * 2.0) +
               t16 * t4 * t9) +
              t16 * t7 * t9) +
             t25_tmp * t4 * t9 * 2.0) +
            t25_tmp * t7 * t9 * 2.0) -
           h1 * this->robot_inertial_par[4] * this->robot_dim[4] *
               this->robot_inertial_par[9] * t7 * t19) +
          t26_tmp * t4 * t6 * t8 * 2.0) +
         i_r_u_check_tmp * t4 * t5 * t8 * 2.0) +
        j_r_u_check_tmp * t4 * t6 * t8 * 2.0) +
       k_r_u_check_tmp * t4 * t5 * t8 * 2.0);
}

//
// File trailer for ModelController.cpp
//
// [EOF]
//
