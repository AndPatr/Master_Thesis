//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: ModelController.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 06-Aug-2021 19:16:48
//

// Include Files
#include "ModelController.h"
#include <algorithm>
#include <cmath>
#include <cstring>

// Function Definitions
//
// H_CALC
//     H =
//     H_CALC(ALPHA,BETA,GAMMA,H1,H2,L_A,L_D,L_CM_C,L_CM_D,L_CM_AH,L_CM_BODY,L_H,M_AH,M_C,M_BODY,M_D,M_W,PHI_R,THETA_ST,THETA_ST_BODY)
//
// Arguments    : double alpha
//                double b_gamma
//                double h1
//                double h2
//                double phi_r
//                double beta
//                double H_rel_CoM[25]
// Return Type  : void
//
void ModelController::H_rel_CoM_calc(double alpha, double b_gamma, double h1,
                                     double h2, double phi_r, double beta,
                                     double H_rel_CoM[25])
{
  double t11;
  double t15;
  double t16;
  double t19;
  double t2;
  double t20;
  double t21;
  double t22;
  double t23;
  double t24;
  double t3;
  double t35;
  double t39;
  double t4;
  double t5;
  double t50;
  double t7;
  double t8;
  double t80;
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     29-Jul-2021 16:00:58
  t2 = this->robot_dim[0] + this->robot_dim[4];
  t3 = this->robot_inertial_par[6] * 2.0;
  t4 = this->robot_inertial_par[8] * 2.0;
  t5 = this->robot_inertial_par[7] * 2.0;
  t7 = (beta + phi_r) + this->robot_dim[5];
  t8 = (b_gamma + phi_r) + this->robot_dim[5];
  t11 = std::cos(t7);
  t7 = std::sin(t7);
  t15 = phi_r + -this->robot_dim[6];
  t16 = (phi_r + -alpha) + this->robot_dim[5];
  t80 = (((this->robot_inertial_par[9] + t3) + t4) + t5) +
        this->robot_inertial_par[5] * 2.0;
  t19 = this->robot_dim[3] * t11;
  t20 = this->robot_inertial_par[1] * t11;
  t21 = this->robot_inertial_par[3] * std::cos(t8);
  t22 = this->robot_dim[3] * t7;
  t23 = this->robot_inertial_par[1] * t7;
  t24 = this->robot_inertial_par[3] * std::sin(t8);
  t11 = std::cos(t16);
  t8 = std::sin(t16);
  t50 = 1.0 / (t80 * t80);
  t35 = this->robot_dim[4] * t11;
  t16 = this->robot_dim[4] * t8;
  t39 = t2 * t11;
  t2 *= t8;
  t7 = this->robot_inertial_par[2] * t3;
  t3 = t7 * t11;
  t7 *= t8;
  t8 = h1 * t35;
  t11 = h1 * t16;
  t80 = ((t7 + -t5 * (t23 - t16)) + -t4 * (t21 - t2)) +
        this->robot_inertial_par[9] *
            ((this->robot_inertial_par[4] * std::cos(t15) + -t22) + t16);
  t16 = ((h1 * t7 + this->robot_inertial_par[9] * (t22 + t11)) +
         t5 * (t23 + t11)) +
        t4 * (h2 * t21 + h1 * t2);
  t8 =
      ((h1 * t3 + this->robot_inertial_par[9] * (t19 + t8)) + t5 * (t20 + t8)) +
      this->robot_inertial_par[8] * (h2 * t24 + -(h1 * t39)) * -2.0;
  t7 = ((t3 + t4 * (t24 + t39)) + -t5 * (t20 + -t35)) +
       -(this->robot_inertial_par[9] *
         ((t19 + this->robot_inertial_par[4] * std::sin(t15)) + -t35));
  t11 = -(t50 * t16 * t80 * 2.0) + -(t50 * t8 * t7 * 2.0);
  std::memset(&H_rel_CoM[0], 0, 18U * sizeof(double));
  H_rel_CoM[18] = t50 * (t7 * t7) * 2.0 + t50 * (t80 * t80) * 2.0;
  H_rel_CoM[19] = t11;
  H_rel_CoM[20] = 0.0;
  H_rel_CoM[21] = 0.0;
  H_rel_CoM[22] = 0.0;
  H_rel_CoM[23] = t11;
  H_rel_CoM[24] = t50 * (t16 * t16) * 2.0 + t50 * (t8 * t8) * 2.0;
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::ModelController()
{
  static const double dv[15]{0.06,
                             0.128,
                             0.22749999999999998,
                             0.118,
                             0.0363,
                             0.3,
                             0.29484,
                             0.165888,
                             0.152928,
                             10.0,
                             0.001,
                             0.0050866042499999988,
                             0.000905969664,
                             0.00070978982399999991,
                             0.1};
  static const double dv1[7]{
      0.1, 0.145, 0.236, 0.256, 0.355, 0.78539816339744828, 2.5132741228718345};
  std::copy(&dv[0], &dv[15], &this->robot_inertial_par[0]);
  for (int i{0}; i < 7; i++) {
    this->robot_dim[i] = dv1[i];
  }
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::~ModelController()
{
  // (no terminate code required)
}

//
// File trailer for ModelController.cpp
//
// [EOF]
//
