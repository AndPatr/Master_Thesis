//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: ModelController.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 06-Aug-2021 17:16:07
//

// Include Files
#include "ModelController.h"
#include <algorithm>
#include <cmath>
#include <cstring>

// Function Definitions
//
// A_U_LIM_CALC
//     A_U_LIM =
//     A_U_LIM_CALC(J_AH,J_C,J_BODY,J_D,ALPHA,BETA,GAMMA,H1,H2,L_A,L_D,L_CM_C,L_CM_D,L_CM_AH,L_CM_BODY,L_H,M_AH,M_C,M_BODY,M_D,PHI_R,THETA_ST,THETA_ST_BODY)
//
// Arguments    : double alpha
//                double b_gamma
//                double h1
//                double h2
//                double phi_r
//                double beta
//                double A_u_lim[56]
// Return Type  : void
//
void ModelController::A_u_lim_calc(double alpha, double b_gamma, double h1,
                                   double h2, double phi_r, double beta,
                                   double A_u_lim[56])
{
  double t10;
  double t100;
  double t101;
  double t102;
  double t103;
  double t113;
  double t114;
  double t115;
  double t116;
  double t118;
  double t120;
  double t120_tmp;
  double t122;
  double t122_tmp;
  double t129;
  double t130;
  double t134;
  double t134_tmp;
  double t135;
  double t136;
  double t137;
  double t138;
  double t139;
  double t140;
  double t147;
  double t155;
  double t166;
  double t168;
  double t17;
  double t173;
  double t174;
  double t175;
  double t179;
  double t180;
  double t181;
  double t182;
  double t183;
  double t184;
  double t192;
  double t195;
  double t2;
  double t20;
  double t200;
  double t201;
  double t202;
  double t203;
  double t206;
  double t207;
  double t208;
  double t209;
  double t21;
  double t22;
  double t251;
  double t252;
  double t259;
  double t263;
  double t264;
  double t272;
  double t28;
  double t3;
  double t31;
  double t36;
  double t41;
  double t42;
  double t43;
  double t44;
  double t45;
  double t46;
  double t47;
  double t48;
  double t49;
  double t50;
  double t50_tmp;
  double t51;
  double t52;
  double t53;
  double t54;
  double t55;
  double t56;
  double t57;
  double t58;
  double t64;
  double t67;
  double t75;
  double t8;
  double t9;
  double t96;
  double t97;
  double t98;
  double t99;
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     29-Jul-2021 16:01:03
  t2 = this->robot_inertial_par[11] * h1;
  t3 = this->robot_inertial_par[13] * h2;
  t8 = this->robot_inertial_par[12] * 2.0;
  t9 = h1 * h1;
  t10 = h2 * h2;
  t17 = this->robot_dim[4] * this->robot_dim[4];
  t22 = (beta + phi_r) + this->robot_dim[5];
  t28 = (b_gamma + phi_r) + this->robot_dim[5];
  t50_tmp =
      this->robot_dim[0] * this->robot_dim[4] * this->robot_inertial_par[8];
  t50 = t50_tmp * 2.0;
  t51 = t50_tmp * 4.0;
  t52 = this->robot_inertial_par[14] / 2.0;
  t20 = std::cos(alpha + beta);
  t21 = std::sin(alpha + b_gamma);
  t31 = std::cos(t22);
  t36 = std::sin(t22);
  t41 = this->robot_inertial_par[8] * (this->robot_dim[0] * this->robot_dim[0]);
  t42 = this->robot_inertial_par[6] *
        (this->robot_inertial_par[2] * this->robot_inertial_par[2]);
  t43 = this->robot_inertial_par[8] *
        (this->robot_inertial_par[3] * this->robot_inertial_par[3]);
  t44 = this->robot_inertial_par[9] * (this->robot_dim[3] * this->robot_dim[3]);
  t45 = this->robot_inertial_par[7] *
        (this->robot_inertial_par[1] * this->robot_inertial_par[1]);
  t46 = this->robot_inertial_par[9] *
        (this->robot_inertial_par[4] * this->robot_inertial_par[4]);
  t47 = this->robot_inertial_par[8] * t17;
  t48 = this->robot_inertial_par[9] * t17;
  t49 = this->robot_inertial_par[7] * t17;
  t67 = phi_r + -this->robot_dim[6];
  t75 = (phi_r + -alpha) + this->robot_dim[5];
  t53 = h1 * t41;
  t54 = h1 * t42;
  t55 = h2 * t43;
  t56 = h1 * t47;
  t57 = h1 * t48;
  t58 = h1 * t49;
  t64 = t45 * 2.0;
  t96 = this->robot_dim[3] * this->robot_dim[4] * this->robot_inertial_par[9] *
        t20;
  t97 = this->robot_inertial_par[1] * this->robot_dim[4] *
        this->robot_inertial_par[7] * t20;
  t22 = this->robot_dim[3] * this->robot_inertial_par[9];
  t98 = t22 * t31;
  t17 = this->robot_inertial_par[1] * this->robot_inertial_par[7];
  t99 = t17 * t31;
  t20 = this->robot_inertial_par[3] * this->robot_inertial_par[8];
  t100 = t20 * std::cos(t28);
  t101 = t22 * t36;
  t102 = t17 * t36;
  t103 = t20 * std::sin(t28);
  t31 = std::cos(t75);
  t75 = std::sin(t75);
  t113 = t44 / 2.0;
  t114 = t46 / 2.0;
  t115 = t48 / 2.0;
  t120_tmp = this->robot_dim[0] * this->robot_inertial_par[3] *
             this->robot_inertial_par[8] * t21;
  t120 = t120_tmp * 2.0;
  t122_tmp = this->robot_inertial_par[3] * this->robot_dim[4] *
             this->robot_inertial_par[8] * t21;
  t122 = t122_tmp * 2.0;
  t134_tmp = h1 * this->robot_dim[0];
  t134 = t134_tmp * this->robot_inertial_par[3] * this->robot_inertial_par[8] *
         t21;
  t135 = h2 * this->robot_dim[0] * this->robot_inertial_par[3] *
         this->robot_inertial_par[8] * t21;
  t136 = h1 * this->robot_inertial_par[3] * this->robot_dim[4] *
         this->robot_inertial_par[8] * t21;
  t137 = h2 * this->robot_inertial_par[3] * this->robot_dim[4] *
         this->robot_inertial_par[8] * t21;
  t140 = this->robot_dim[3] * this->robot_inertial_par[4] *
         this->robot_inertial_par[9] *
         std::sin((beta + this->robot_dim[5]) + this->robot_dim[6]);
  t116 = t57 / 2.0;
  t118 = t97 * 2.0;
  t129 = h1 * t96;
  t130 = h1 * t97;
  t138 = h2 * t100;
  t139 = h2 * t103;
  t22 = this->robot_inertial_par[4] * this->robot_inertial_par[9];
  t147 = t22 * std::cos(t67);
  t155 = t22 * std::sin(t67);
  t166 = h1 * t120;
  t168 = h1 * t122;
  t173 = t96 / 2.0;
  t174 = t98 / 2.0;
  t175 = t101 / 2.0;
  t22 = this->robot_dim[0] * this->robot_inertial_par[8];
  t180 = t22 * t31;
  t17 = this->robot_inertial_par[2] * this->robot_inertial_par[6];
  t181 = t17 * t31;
  t20 = this->robot_dim[4] * this->robot_inertial_par[8];
  t182 = t20 * t31;
  t36 = this->robot_dim[4] * this->robot_inertial_par[9];
  t183 = t36 * t31;
  t28 = this->robot_dim[4] * this->robot_inertial_par[7];
  t184 = t28 * t31;
  t192 = t22 * t75;
  t67 = t17 * t75;
  t21 = t20 * t75;
  t195 = t36 * t75;
  t22 = t28 * t75;
  t31 = this->robot_inertial_par[4] * this->robot_dim[4] *
        this->robot_inertial_par[9] *
        std::sin((-alpha + this->robot_dim[5]) + this->robot_dim[6]);
  t28 = t140 / 2.0;
  t179 = t130 * -2.0;
  t200 = h1 * t180;
  t201 = h1 * t181;
  t202 = h1 * t182;
  t203 = h1 * t184;
  t206 = h1 * t192;
  t207 = h1 * t67;
  t208 = h1 * t21;
  t209 = h1 * t22;
  t75 = t129 / 2.0;
  t17 = t147 / 2.0;
  t20 = t155 / 2.0;
  t36 = h1 * t31;
  t251 = t183 / 2.0;
  t252 = t195 / 2.0;
  t259 = t36 / 2.0;
  t264 =
      (((((((-t100 + -t102) + t192) + t67) + t21) + t22) + -t175) + t17) + t252;
  t272 = ((((((((((((((((((this->robot_inertial_par[11] +
                           this->robot_inertial_par[13]) +
                          this->robot_inertial_par[12]) +
                         t41) +
                        t42) +
                       t43) +
                      t45) +
                     t47) +
                    t49) +
                   t50) +
                  t52) +
                 t113) +
                t114) +
               t115) +
              t120) +
             t122) +
            -t96) +
           -t118) +
          -t140) +
         t31;
  t52 = ((((((((((((((((((-this->robot_inertial_par[11] +
                          -this->robot_inertial_par[13]) +
                         -this->robot_inertial_par[12]) +
                        -t50) +
                       -t52) +
                      -t41) +
                     -t42) +
                    -t43) +
                   -t45) +
                  -t47) +
                 -t49) +
                t96) +
               t118) +
              -t113) +
             -t114) +
            -t115) +
           t140) +
          -t120) +
         -t122) +
        -t31;
  t263 = (((((((t103 + -t99) + t180) + t181) + t182) + t184) + -t174) + -t20) +
         t251;
  t147 = h1 *
         ((((((((t147 + -(t100 * 2.0)) + -t101) + -(t102 * 2.0)) + t195) +
             t192 * 2.0) +
            t67 * 2.0) +
           t21 * 2.0) +
          t22 * 2.0) /
         2.0;
  t155 = h1 *
         ((((((((t103 * 2.0 + -t98) + -(t99 * 2.0)) + t183) + -t155) +
             t180 * 2.0) +
            t181 * 2.0) +
           t182 * 2.0) +
          t184 * 2.0) /
         2.0;
  t122 = (((((((t100 + t102) + t175) + -t192) + -t67) + -t21) + -t22) + -t17) +
         -t252;
  t120 =
      (((((((t99 + -t103) + t174) + t20) + -t180) + -t181) + -t182) + -t184) +
      -t251;
  t114 = h1 *
         (((((((((((((((((((this->robot_inertial_par[14] +
                            this->robot_inertial_par[11] * 2.0) +
                           this->robot_inertial_par[13] * 2.0) +
                          t8) +
                         t44) +
                        t46) +
                       t48) +
                      t51) +
                     t41 * 2.0) +
                    t42 * 2.0) +
                   t43 * 2.0) +
                  t64) +
                 t47 * 2.0) +
                t49 * 2.0) +
               t120_tmp * 4.0) +
              t122_tmp * 4.0) +
             -(t96 * 2.0)) +
            -(t97 * 4.0)) +
           -(t140 * 2.0)) +
          t31 * 2.0) /
         2.0;
  t22 = h1 *
        (((((((((((((((((((((t2 * 2.0 + -t8) + -(t3 * 2.0)) + t57) + h1 * t51) +
                         t53 * 2.0) +
                        t54 * 2.0) +
                       t56 * 2.0) +
                      t58 * 2.0) +
                     -t44) +
                    -t64) +
                   -(t55 * 2.0)) +
                  t96) +
                 t118) +
                t140) +
               t166) +
              t168) +
             -t129) +
            t179) +
           t135 * -2.0) +
          t137 * -2.0) +
         t36) /
        2.0;
  t192 = ((((((((((((((((((((t2 + -this->robot_inertial_par[12]) + -t3) + t53) +
                          t54) +
                         t56) +
                        t58) +
                       h1 * t50) +
                      -t45) +
                     -t55) +
                    t97) +
                   t116) +
                  -t113) +
                 t134) +
                t136) +
               t173) +
              -t130) +
             -t135) +
            -t137) +
           t28) +
          -t75) +
         t259;
  t67 = ((((((((((((((((((((this->robot_inertial_par[12] + t3) + -t2) + t45) +
                         t55) +
                        t134_tmp * this->robot_dim[4] *
                            this->robot_inertial_par[8] * -2.0) +
                       -t53) +
                      -t54) +
                     -t56) +
                    -t58) +
                   t113) +
                  t130) +
                 t135) +
                t137) +
               -t116) +
              -t97) +
             -t134) +
            -t136) +
           -t173) +
          t75) +
         -t28) +
        -t259;
  t21 = (((((((t139 + -t99) + -t174) + -t200) + -t201) + -t202) + -t203) +
         h1 * t183 * -0.5) +
        t155;
  t75 = (((((((-t102 + -t138) + -t175) + -t206) + -t207) + -t208) + -t209) +
         h1 * t195 * -0.5) +
        t147;
  t28 = (((((((((((((((-this->robot_inertial_par[12] + h1 * -t2) + h2 * -t3) +
                     -t45) +
                    t50_tmp * t9 * -2.0) +
                   -t113) +
                  t9 * -t41) +
                 t9 * -t42) +
                t10 * -t43) +
               t9 * -t47) +
              t9 * -t49) +
             h2 * t166) +
            h2 * t168) +
           -t129) +
          t179) +
         t9 * t48 * -0.5) +
        t22;
  t36 =
      (((((((t102 + t138) + t175) + t206) + t207) + t208) + t209) + h1 * t252) +
      -t147;
  t31 =
      (((((((t99 + t174) + -t139) + t200) + t201) + t202) + t203) + h1 * t251) +
      -t155;
  t17 =
      (((((((((((((((this->robot_inertial_par[12] + h1 * t2) + h2 * t3) + t45) +
                  t9 * t41) +
                 t9 * t42) +
                t10 * t43) +
               t9 * t47) +
              t9 * t49) +
             t9 * t50) +
            t113) +
           t129) +
          h1 * t118) +
         t9 * t115) +
        h2 * t134 * -2.0) +
       h2 * t136 * -2.0) +
      -t22;
  t20 = -t114 + t192;
  t22 = t114 + t67;
  A_u_lim[0] = t120;
  A_u_lim[1] = t31;
  A_u_lim[2] = t263;
  A_u_lim[3] = t21;
  A_u_lim[4] = t263;
  A_u_lim[5] = t21;
  A_u_lim[6] = t120;
  A_u_lim[7] = t31;
  A_u_lim[8] = t122;
  A_u_lim[9] = t36;
  A_u_lim[10] = t264;
  A_u_lim[11] = t75;
  A_u_lim[12] = t264;
  A_u_lim[13] = t75;
  A_u_lim[14] = t122;
  A_u_lim[15] = t36;
  std::memset(&A_u_lim[16], 0, 8U * sizeof(double));
  A_u_lim[24] = t272;
  A_u_lim[25] = t22;
  A_u_lim[26] = t52;
  A_u_lim[27] = t20;
  A_u_lim[28] = t52;
  A_u_lim[29] = t20;
  A_u_lim[30] = t272;
  A_u_lim[31] = t22;
  A_u_lim[32] = t67;
  A_u_lim[33] = t17;
  A_u_lim[34] = t192;
  A_u_lim[35] = t28;
  A_u_lim[36] = t192;
  A_u_lim[37] = t28;
  A_u_lim[38] = t67;
  A_u_lim[39] = t17;
  std::memset(&A_u_lim[40], 0, 16U * sizeof(double));
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::ModelController()
{
  static const double dv[15]{0.06,
                             0.128,
                             0.22749999999999998,
                             0.118,
                             0.0363,
                             0.3,
                             0.29484,
                             0.165888,
                             0.152928,
                             10.0,
                             0.001,
                             0.0050866042499999988,
                             0.000905969664,
                             0.00070978982399999991,
                             0.1};
  static const double dv1[7]{
      0.1, 0.145, 0.236, 0.256, 0.355, 0.78539816339744828, 2.5132741228718345};
  std::copy(&dv[0], &dv[15], &this->robot_inertial_par[0]);
  for (int i{0}; i < 7; i++) {
    this->robot_dim[i] = dv1[i];
  }
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::~ModelController()
{
  // (no terminate code required)
}

//
// File trailer for ModelController.cpp
//
// [EOF]
//
