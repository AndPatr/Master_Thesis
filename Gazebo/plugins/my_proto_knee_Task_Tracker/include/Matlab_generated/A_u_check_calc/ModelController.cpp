//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: ModelController.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 06-Aug-2021 18:03:48
//

// Include Files
#include "ModelController.h"
#include <algorithm>
#include <cmath>

// Function Definitions
//
// A_U_CHECK_CALC
//     A_U_CHECK =
//     A_U_CHECK_CALC(J_AH,J_C,J_BODY,J_D,ALPHA,BETA,GAMMA,H1,H2,L_A,L_D,L_CM_C,L_CM_D,L_CM_AH,L_CM_BODY,L_H,M_AH,M_C,M_BODY,M_D,PHI_R,THETA_ST,THETA_ST_BODY)
//
// Arguments    : double alpha
//                double b_gamma
//                double h1
//                double h2
//                double phi_r
//                double beta
//                double A_u_check[14]
// Return Type  : void
//
void ModelController::A_u_check_calc(double alpha, double b_gamma, double h1,
                                     double h2, double phi_r, double beta,
                                     double A_u_check[14])
{
  double b_t47_tmp;
  double b_t69_tmp;
  double c_t47_tmp;
  double d_t47_tmp;
  double e_t47_tmp;
  double f_t47_tmp;
  double g_t47_tmp;
  double h_t47_tmp;
  double i_t47_tmp;
  double j_t47_tmp;
  double k_t47_tmp;
  double t11;
  double t12;
  double t15;
  double t16;
  double t17;
  double t19;
  double t22;
  double t23;
  double t25;
  double t27;
  double t28;
  double t31;
  double t32;
  double t4;
  double t46;
  double t47_tmp;
  double t49;
  double t5;
  double t50;
  double t51;
  double t52_tmp;
  double t53_tmp;
  double t55;
  double t56;
  double t6;
  double t69;
  double t69_tmp;
  double t7;
  double t9;
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     29-Jul-2021 16:01:02
  t4 = this->robot_inertial_par[12] * 2.0;
  t5 = h1 * h1;
  t6 = h2 * h2;
  t7 = this->robot_dim[0] * this->robot_dim[0];
  t9 = this->robot_inertial_par[3] * this->robot_inertial_par[3];
  t11 = this->robot_inertial_par[2] * this->robot_inertial_par[2];
  t12 = this->robot_dim[4] * this->robot_dim[4];
  t17 = (beta + phi_r) + this->robot_dim[5];
  t19 = (b_gamma + phi_r) + this->robot_dim[5];
  t15 = std::cos(alpha + beta);
  t16 = std::sin(alpha + b_gamma);
  t22 = std::cos(t17);
  t23 = std::cos(t19);
  t25 = std::sin(t17);
  t27 = std::sin(t19);
  t28 = this->robot_inertial_par[9] * (this->robot_dim[3] * this->robot_dim[3]);
  t31 = this->robot_inertial_par[7] *
        (this->robot_inertial_par[1] * this->robot_inertial_par[1]) * 2.0;
  t32 = phi_r + -this->robot_dim[6];
  t17 = (phi_r + -alpha) + this->robot_dim[5];
  t46 = this->robot_dim[3] * this->robot_dim[4] * this->robot_inertial_par[9] *
        t15;
  t47_tmp = this->robot_dim[3] * this->robot_inertial_par[9];
  t49 = std::cos(t17);
  t50 = std::sin(t17);
  t51 = std::sin((-alpha + this->robot_dim[5]) + this->robot_dim[6]);
  t52_tmp = this->robot_inertial_par[1] * this->robot_dim[4] *
            this->robot_inertial_par[7] * t15;
  t17 = t52_tmp * 2.0;
  t53_tmp = this->robot_inertial_par[1] * this->robot_inertial_par[7];
  t56 = this->robot_dim[3] * this->robot_inertial_par[4] *
        this->robot_inertial_par[9] *
        std::sin((beta + this->robot_dim[5]) + this->robot_dim[6]);
  t55 = h1 * t46;
  t19 = h1 * this->robot_inertial_par[8];
  t69_tmp = h1 * this->robot_dim[0];
  b_t69_tmp = h2 * this->robot_inertial_par[3];
  t69 = ((((((((((((((((((((t4 + this->robot_inertial_par[13] * h2 * 2.0) +
                           -(this->robot_inertial_par[11] * h1 * 2.0)) +
                          t28) +
                         t31) +
                        h2 * this->robot_inertial_par[8] * t9 * 2.0) +
                       -(t69_tmp * this->robot_dim[4] *
                         this->robot_inertial_par[8] * 4.0)) +
                      -(t19 * t7 * 2.0)) +
                     -(h1 * this->robot_inertial_par[6] * t11 * 2.0)) +
                    -(t19 * t12 * 2.0)) +
                   -(h1 * this->robot_inertial_par[9] * t12)) +
                  -(h1 * this->robot_inertial_par[7] * t12 * 2.0)) +
                 t55) +
                -t46) +
               -t17) +
              h1 * t17) +
             h2 * this->robot_dim[0] * this->robot_inertial_par[3] *
                 this->robot_inertial_par[8] * t16 * 2.0) +
            b_t69_tmp * this->robot_dim[4] * this->robot_inertial_par[8] * t16 *
                2.0) +
           -(t69_tmp * this->robot_inertial_par[3] *
             this->robot_inertial_par[8] * t16 * 2.0)) +
          -(h1 * this->robot_inertial_par[3] * this->robot_dim[4] *
            this->robot_inertial_par[8] * t16 * 2.0)) +
         -t56) +
        -(h1 * this->robot_inertial_par[4] * this->robot_dim[4] *
          this->robot_inertial_par[9] * t51);
  b_t47_tmp = t47_tmp * t22 + t53_tmp * t22 * 2.0;
  c_t47_tmp = this->robot_inertial_par[4] * this->robot_inertial_par[9];
  d_t47_tmp = this->robot_dim[0] * this->robot_inertial_par[8];
  e_t47_tmp = this->robot_inertial_par[2] * this->robot_inertial_par[6];
  f_t47_tmp = this->robot_inertial_par[3] * this->robot_inertial_par[8];
  g_t47_tmp = this->robot_dim[4] * this->robot_inertial_par[8];
  h_t47_tmp = this->robot_dim[4] * this->robot_inertial_par[9];
  i_t47_tmp = this->robot_dim[4] * this->robot_inertial_par[7];
  A_u_check[0] =
      ((((((b_t47_tmp + c_t47_tmp * std::sin(t32)) - d_t47_tmp * t49 * 2.0) -
          e_t47_tmp * t49 * 2.0) -
         f_t47_tmp * t27 * 2.0) -
        g_t47_tmp * t49 * 2.0) -
       h_t47_tmp * t49) -
      i_t47_tmp * t49 * 2.0;
  j_t47_tmp = h1 * this->robot_dim[4];
  t69_tmp *= this->robot_inertial_par[8];
  k_t47_tmp = h1 * this->robot_inertial_par[2] * this->robot_inertial_par[6];
  t17 = b_t69_tmp * this->robot_inertial_par[8];
  t19 = j_t47_tmp * this->robot_inertial_par[8];
  t22 = j_t47_tmp * this->robot_inertial_par[9];
  j_t47_tmp *= this->robot_inertial_par[7];
  A_u_check[1] =
      (((((b_t47_tmp + t69_tmp * t49 * 2.0) + k_t47_tmp * t49 * 2.0) -
         t17 * t27 * 2.0) +
        t19 * t49 * 2.0) +
       t22 * t49) +
      j_t47_tmp * t49 * 2.0;
  t47_tmp = t47_tmp * t25 + t53_tmp * t25 * 2.0;
  A_u_check[2] =
      ((((((t47_tmp - c_t47_tmp * std::cos(t32)) - d_t47_tmp * t50 * 2.0) -
          e_t47_tmp * t50 * 2.0) +
         f_t47_tmp * t23 * 2.0) -
        g_t47_tmp * t50 * 2.0) -
       h_t47_tmp * t50) -
      i_t47_tmp * t50 * 2.0;
  A_u_check[3] = (((((t47_tmp + t69_tmp * t50 * 2.0) + k_t47_tmp * t50 * 2.0) +
                    t17 * t23 * 2.0) +
                   t19 * t50 * 2.0) +
                  t22 * t50) +
                 j_t47_tmp * t50 * 2.0;
  A_u_check[4] = 0.0;
  A_u_check[5] = 0.0;
  t47_tmp =
      this->robot_dim[0] * this->robot_dim[4] * this->robot_inertial_par[8];
  A_u_check[6] =
      ((((((((((((((((((this->robot_inertial_par[11] * 2.0 +
                        this->robot_inertial_par[13] * 2.0) +
                       this->robot_inertial_par[14]) +
                      t4) +
                     t28) +
                    t31) -
                   t46 * 2.0) -
                  t56 * 2.0) +
                 this->robot_inertial_par[6] * t11 * 2.0) +
                this->robot_inertial_par[8] * t7 * 2.0) +
               this->robot_inertial_par[8] * t9 * 2.0) +
              this->robot_inertial_par[8] * t12 * 2.0) +
             this->robot_inertial_par[9] * t12) +
            this->robot_inertial_par[7] * t12 * 2.0) +
           this->robot_inertial_par[4] * this->robot_inertial_par[4] *
               this->robot_inertial_par[9]) +
          t47_tmp * 4.0) +
         this->robot_dim[0] * this->robot_inertial_par[3] *
             this->robot_inertial_par[8] * t16 * 4.0) +
        this->robot_inertial_par[3] * this->robot_dim[4] *
            this->robot_inertial_par[8] * t16 * 4.0) -
       t52_tmp * 4.0) +
      this->robot_inertial_par[4] * this->robot_dim[4] *
          this->robot_inertial_par[9] * t51 * 2.0;
  A_u_check[7] = t69;
  A_u_check[8] = t69;
  b_t47_tmp = this->robot_inertial_par[8] * t5;
  c_t47_tmp = h1 * h2;
  A_u_check[9] = ((((((((((((((t4 + t28) + t31) + t55 * 2.0) +
                            this->robot_inertial_par[11] * t5 * 2.0) +
                           this->robot_inertial_par[13] * t6 * 2.0) +
                          this->robot_inertial_par[6] * t5 * t11 * 2.0) +
                         b_t47_tmp * t7 * 2.0) +
                        this->robot_inertial_par[8] * t6 * t9 * 2.0) +
                       b_t47_tmp * t12 * 2.0) +
                      this->robot_inertial_par[9] * t5 * t12) +
                     this->robot_inertial_par[7] * t5 * t12 * 2.0) +
                    t47_tmp * t5 * 4.0) +
                   h1 * this->robot_inertial_par[1] * this->robot_dim[4] *
                       this->robot_inertial_par[7] * t15 * 4.0) -
                  c_t47_tmp * this->robot_dim[0] * this->robot_inertial_par[3] *
                      this->robot_inertial_par[8] * t16 * 4.0) -
                 c_t47_tmp * this->robot_inertial_par[3] * this->robot_dim[4] *
                     this->robot_inertial_par[8] * t16 * 4.0;
  A_u_check[10] = 0.0;
  A_u_check[11] = 0.0;
  A_u_check[12] = 0.0;
  A_u_check[13] = 0.0;
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::ModelController()
{
  static const double dv[15]{0.06,
                             0.128,
                             0.22749999999999998,
                             0.118,
                             0.0363,
                             0.3,
                             0.29484,
                             0.165888,
                             0.152928,
                             10.0,
                             0.001,
                             0.0050866042499999988,
                             0.000905969664,
                             0.00070978982399999991,
                             0.1};
  static const double dv1[7]{
      0.1, 0.145, 0.236, 0.256, 0.355, 0.78539816339744828, 2.5132741228718345};
  std::copy(&dv[0], &dv[15], &this->robot_inertial_par[0]);
  for (int i{0}; i < 7; i++) {
    this->robot_dim[i] = dv1[i];
  }
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::~ModelController()
{
  // (no terminate code required)
}

//
// File trailer for ModelController.cpp
//
// [EOF]
//
