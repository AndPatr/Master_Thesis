//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: ModelController.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 06-Aug-2021 18:46:00
//

// Include Files
#include "ModelController.h"
#include <algorithm>
#include <cmath>

// Function Definitions
//
// A_LAMBDA_DYN_CALC
//     A_LAMBDA_DYN =
//     A_LAMBDA_DYN_CALC(ALPHA,BETA,GAMMA,H1,H2,L_A,L_D,L_CM_C,L_CM_D,L_CM_AH,L_CM_BODY,L_H,M_AH,M_C,M_BODY,M_D,M_W,PHI_R,THETA_ST,THETA_ST_BODY)
//
// Arguments    : double alpha
//                double b_gamma
//                double h1
//                double h2
//                double phi_r
//                double beta
//                double A_lambda_dyn[14]
// Return Type  : void
//
void ModelController::A_lambda_dyn_calc(double alpha, double b_gamma, double h1,
                                        double h2, double phi_r, double beta,
                                        double A_lambda_dyn[14])
{
  double A_lambda_dyn_tmp;
  double b_A_lambda_dyn_tmp;
  double c_A_lambda_dyn_tmp;
  double d_A_lambda_dyn_tmp;
  double e_A_lambda_dyn_tmp;
  double f_A_lambda_dyn_tmp;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t16_tmp;
  double t18;
  double t19;
  double t2;
  double t3;
  double t4;
  double t6;
  double t7;
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     29-Jul-2021 16:01:00
  t2 = this->robot_inertial_par[6] * 2.0;
  t3 = this->robot_inertial_par[8] * 2.0;
  t4 = this->robot_inertial_par[7] * 2.0;
  t6 = (beta + phi_r) + this->robot_dim[5];
  t7 = (b_gamma + phi_r) + this->robot_dim[5];
  t10 = std::cos(t6);
  t11 = std::cos(t7);
  t12 = std::sin(t6);
  t13 = std::sin(t7);
  t14 = phi_r + -this->robot_dim[6];
  t6 = (phi_r + -alpha) + this->robot_dim[5];
  t7 = (((this->robot_inertial_par[9] + t2) + t3) + t4) +
       this->robot_inertial_par[5] * 2.0;
  t16_tmp = this->robot_dim[3] * this->robot_inertial_par[9];
  t18 = std::cos(t6);
  t19 = std::sin(t6);
  t6 = this->robot_inertial_par[1] * t4;
  A_lambda_dyn[0] = t7;
  A_lambda_dyn[1] = 0.0;
  A_lambda_dyn[2] = 0.0;
  A_lambda_dyn[3] = t7;
  A_lambda_dyn[4] = 0.0;
  A_lambda_dyn[5] = 0.0;
  A_lambda_dyn_tmp = this->robot_inertial_par[4] * this->robot_inertial_par[9];
  b_A_lambda_dyn_tmp = this->robot_dim[0] * this->robot_inertial_par[8];
  c_A_lambda_dyn_tmp =
      this->robot_inertial_par[2] * this->robot_inertial_par[6];
  d_A_lambda_dyn_tmp = this->robot_dim[4] * this->robot_inertial_par[8];
  e_A_lambda_dyn_tmp = this->robot_dim[4] * this->robot_inertial_par[9];
  f_A_lambda_dyn_tmp = this->robot_dim[4] * this->robot_inertial_par[7];
  t7 = t16_tmp * t10 + t6 * t10;
  A_lambda_dyn[6] = ((((((t7 + A_lambda_dyn_tmp * std::sin(t14)) -
                         b_A_lambda_dyn_tmp * t18 * 2.0) -
                        c_A_lambda_dyn_tmp * t18 * 2.0) -
                       this->robot_inertial_par[3] *
                           this->robot_inertial_par[8] * t13 * 2.0) -
                      d_A_lambda_dyn_tmp * t18 * 2.0) -
                     e_A_lambda_dyn_tmp * t18) -
                    f_A_lambda_dyn_tmp * t18 * 2.0;
  t6 = t16_tmp * t12 + t6 * t12;
  A_lambda_dyn[7] = ((((((t6 - A_lambda_dyn_tmp * std::cos(t14)) -
                         b_A_lambda_dyn_tmp * t19 * 2.0) -
                        c_A_lambda_dyn_tmp * t19 * 2.0) -
                       d_A_lambda_dyn_tmp * t19 * 2.0) -
                      e_A_lambda_dyn_tmp * t19) -
                     f_A_lambda_dyn_tmp * t19 * 2.0) +
                    this->robot_inertial_par[3] * t3 * t11;
  A_lambda_dyn_tmp = h1 * this->robot_dim[4];
  b_A_lambda_dyn_tmp = A_lambda_dyn_tmp * this->robot_inertial_par[9];
  c_A_lambda_dyn_tmp = h1 * this->robot_dim[0] * t3;
  d_A_lambda_dyn_tmp = h2 * this->robot_inertial_par[3];
  e_A_lambda_dyn_tmp = h1 * this->robot_inertial_par[2] * t2;
  f_A_lambda_dyn_tmp = A_lambda_dyn_tmp * t3;
  A_lambda_dyn_tmp *= t4;
  A_lambda_dyn[8] =
      (((((t7 - d_A_lambda_dyn_tmp * this->robot_inertial_par[8] * t13 * 2.0) +
          b_A_lambda_dyn_tmp * t18) +
         c_A_lambda_dyn_tmp * t18) +
        e_A_lambda_dyn_tmp * t18) +
       f_A_lambda_dyn_tmp * t18) +
      A_lambda_dyn_tmp * t18;
  A_lambda_dyn[9] =
      (((((t6 + b_A_lambda_dyn_tmp * t19) + c_A_lambda_dyn_tmp * t19) +
         d_A_lambda_dyn_tmp * t3 * t11) +
        e_A_lambda_dyn_tmp * t19) +
       f_A_lambda_dyn_tmp * t19) +
      A_lambda_dyn_tmp * t19;
  A_lambda_dyn[10] = -1.0;
  A_lambda_dyn[11] = 0.0;
  A_lambda_dyn[12] = 0.0;
  A_lambda_dyn[13] = -1.0;
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::ModelController()
{
  static const double dv[15]{0.06,
                             0.128,
                             0.22749999999999998,
                             0.118,
                             0.0363,
                             0.3,
                             0.29484,
                             0.165888,
                             0.152928,
                             10.0,
                             0.001,
                             0.0050866042499999988,
                             0.000905969664,
                             0.00070978982399999991,
                             0.1};
  static const double dv1[7]{
      0.1, 0.145, 0.236, 0.256, 0.355, 0.78539816339744828, 2.5132741228718345};
  std::copy(&dv[0], &dv[15], &this->robot_inertial_par[0]);
  for (int i{0}; i < 7; i++) {
    this->robot_dim[i] = dv1[i];
  }
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::~ModelController()
{
  // (no terminate code required)
}

//
// File trailer for ModelController.cpp
//
// [EOF]
//
