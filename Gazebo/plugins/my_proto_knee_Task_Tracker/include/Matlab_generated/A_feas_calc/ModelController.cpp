//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: ModelController.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 06-Aug-2021 18:24:03
//

// Include Files
#include "ModelController.h"
#include <algorithm>
#include <cmath>

// Function Definitions
//
// A_FEAS_CALC
//     A_FEAS =
//     A_FEAS_CALC(J_AH,J_C,J_BODY,J_D,J_W,ALPHA,BETA,GAMMA,H1,H2,L_A,L_D,L_CM_C,L_CM_D,L_CM_AH,L_CM_BODY,L_H,M_AH,M_C,M_BODY,M_D,M_W,PHI_R,R_W,THETA_ST,THETA_ST_BODY)
//
// Arguments    : double alpha
//                double b_gamma
//                double h1
//                double h2
//                double phi_r
//                double beta
//                double A_feas[7]
// Return Type  : void
//
void ModelController::A_feas_calc(double alpha, double b_gamma, double h1,
                                  double h2, double phi_r, double beta,
                                  double A_feas[7])
{
  double A_feas_tmp;
  double A_feas_tmp_tmp;
  double A_feas_tmp_tmp_tmp;
  double b_A_feas_tmp;
  double b_A_feas_tmp_tmp;
  double c_A_feas_tmp;
  double c_A_feas_tmp_tmp;
  double d_A_feas_tmp;
  double d_A_feas_tmp_tmp;
  double e_A_feas_tmp;
  double f_A_feas_tmp;
  double g_A_feas_tmp;
  double h_A_feas_tmp;
  double i_A_feas_tmp;
  double j_A_feas_tmp;
  double k_A_feas_tmp;
  double l_A_feas_tmp;
  double m_A_feas_tmp;
  double n_A_feas_tmp;
  double o_A_feas_tmp;
  double p_A_feas_tmp;
  double t10;
  double t11;
  double t12;
  double t13;
  double t15;
  double t17;
  double t19;
  double t2;
  double t20;
  double t22;
  double t25;
  double t26;
  double t3;
  double t30;
  double t31;
  double t32;
  double t32_tmp;
  double t33;
  double t34;
  double t34_tmp;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     29-Jul-2021 17:21:19
  t2 = std::cos(alpha);
  t3 = std::cos(beta);
  t4 = std::cos(b_gamma);
  t5 = std::cos(phi_r);
  t6 = std::sin(alpha);
  t7 = std::sin(beta);
  t8 = std::cos(this->robot_dim[5]);
  t9 = std::cos(this->robot_dim[6]);
  t10 = std::sin(b_gamma);
  t11 = std::sin(phi_r);
  t12 = std::sin(this->robot_dim[5]);
  t13 = std::sin(this->robot_dim[6]);
  t15 = this->robot_dim[0] * this->robot_dim[0];
  t17 = this->robot_inertial_par[3] * this->robot_inertial_par[3];
  t19 = this->robot_inertial_par[2] * this->robot_inertial_par[2];
  t20 = this->robot_dim[4] * this->robot_dim[4];
  t22 = -(this->robot_inertial_par[12] * 2.0);
  t25 = std::cos((beta + phi_r) + this->robot_dim[5]);
  t26 = std::sin((b_gamma + phi_r) + this->robot_dim[5]);
  t30 = -(this->robot_inertial_par[9] *
          (this->robot_dim[3] * this->robot_dim[3]));
  t31 = -(this->robot_inertial_par[7] *
          (this->robot_inertial_par[1] * this->robot_inertial_par[1]) * 2.0);
  t32_tmp = this->robot_dim[3] * this->robot_inertial_par[9];
  t32 = t32_tmp * t25;
  t33 = std::cos((phi_r + -alpha) + this->robot_dim[5]);
  t34_tmp = this->robot_inertial_par[1] * this->robot_inertial_par[7];
  t34 = t34_tmp * t25 * 2.0;
  A_feas[0] = 0.0;
  A_feas[1] = 0.0;
  A_feas_tmp_tmp = this->robot_inertial_par[4] * this->robot_inertial_par[9];
  A_feas_tmp = A_feas_tmp_tmp * this->robot_inertial_par[0];
  b_A_feas_tmp_tmp = this->robot_dim[0] * this->robot_inertial_par[8];
  b_A_feas_tmp = b_A_feas_tmp_tmp * this->robot_inertial_par[0];
  c_A_feas_tmp = b_A_feas_tmp * t2;
  c_A_feas_tmp_tmp = this->robot_inertial_par[2] * this->robot_inertial_par[6];
  d_A_feas_tmp = c_A_feas_tmp_tmp * this->robot_inertial_par[0];
  e_A_feas_tmp = d_A_feas_tmp * t2;
  A_feas_tmp_tmp_tmp =
      this->robot_inertial_par[3] * this->robot_inertial_par[8];
  d_A_feas_tmp_tmp = A_feas_tmp_tmp_tmp * this->robot_inertial_par[0];
  f_A_feas_tmp = d_A_feas_tmp_tmp * t4;
  g_A_feas_tmp = t32_tmp * this->robot_inertial_par[0];
  h_A_feas_tmp = g_A_feas_tmp * t3;
  i_A_feas_tmp = t34_tmp * this->robot_inertial_par[0];
  j_A_feas_tmp = i_A_feas_tmp * t3;
  t25 = this->robot_dim[4] * this->robot_inertial_par[8];
  k_A_feas_tmp = t25 * this->robot_inertial_par[0];
  l_A_feas_tmp = k_A_feas_tmp * t2;
  t32_tmp = this->robot_dim[4] * this->robot_inertial_par[9];
  m_A_feas_tmp = t32_tmp * this->robot_inertial_par[0];
  n_A_feas_tmp = m_A_feas_tmp * t2;
  t34_tmp = this->robot_dim[4] * this->robot_inertial_par[7];
  o_A_feas_tmp = t34_tmp * this->robot_inertial_par[0];
  p_A_feas_tmp = o_A_feas_tmp * t2;
  A_feas[2] =
      (((((((((((((((((((((((this->robot_inertial_par[10] * 2.0 +
                             this->robot_inertial_par[0] *
                                 this->robot_inertial_par[0] *
                                 ((((this->robot_inertial_par[6] * 2.0 +
                                     this->robot_inertial_par[8] * 2.0) +
                                    this->robot_inertial_par[9]) +
                                   this->robot_inertial_par[7] * 2.0) +
                                  this->robot_inertial_par[5] * 2.0)) +
                            A_feas_tmp * t5 * t13) -
                           A_feas_tmp * t9 * t11) +
                          c_A_feas_tmp * t5 * t8 * 2.0) +
                         b_A_feas_tmp * t5 * t6 * t12 * 2.0) -
                        c_A_feas_tmp * t11 * t12 * 2.0) +
                       b_A_feas_tmp * t6 * t8 * t11 * 2.0) +
                      e_A_feas_tmp * t5 * t8 * 2.0) +
                     d_A_feas_tmp * t5 * t6 * t12 * 2.0) -
                    e_A_feas_tmp * t11 * t12 * 2.0) +
                   d_A_feas_tmp * t6 * t8 * t11 * 2.0) +
                  f_A_feas_tmp * t5 * t12 * 2.0) +
                 f_A_feas_tmp * t8 * t11 * 2.0) +
                d_A_feas_tmp_tmp * t5 * t8 * t10 * 2.0) -
               d_A_feas_tmp_tmp * t10 * t11 * t12 * 2.0) -
              h_A_feas_tmp * t5 * t8) +
             g_A_feas_tmp * t5 * t7 * t12) +
            h_A_feas_tmp * t11 * t12) +
           g_A_feas_tmp * t7 * t8 * t11) -
          j_A_feas_tmp * t5 * t8 * 2.0) +
         i_A_feas_tmp * t5 * t7 * t12 * 2.0) +
        j_A_feas_tmp * t11 * t12 * 2.0) +
       i_A_feas_tmp * t7 * t8 * t11 * 2.0) +
      (((((((((((l_A_feas_tmp * t5 * t8 * 2.0 +
                 k_A_feas_tmp * t5 * t6 * t12 * 2.0) -
                l_A_feas_tmp * t11 * t12 * 2.0) +
               k_A_feas_tmp * t6 * t8 * t11 * 2.0) +
              n_A_feas_tmp * t5 * t8) +
             m_A_feas_tmp * t5 * t6 * t12) -
            n_A_feas_tmp * t11 * t12) +
           m_A_feas_tmp * t6 * t8 * t11) +
          p_A_feas_tmp * t5 * t8 * 2.0) +
         o_A_feas_tmp * t5 * t6 * t12 * 2.0) -
        p_A_feas_tmp * t11 * t12 * 2.0) +
       o_A_feas_tmp * t6 * t8 * t11 * 2.0);
  A_feas_tmp = this->robot_dim[0] * this->robot_inertial_par[3] *
               this->robot_inertial_par[8];
  b_A_feas_tmp = this->robot_inertial_par[3] * this->robot_dim[4] *
                 this->robot_inertial_par[8];
  c_A_feas_tmp =
      this->robot_dim[3] * this->robot_dim[4] * this->robot_inertial_par[9];
  d_A_feas_tmp = this->robot_inertial_par[1] * this->robot_dim[4] *
                 this->robot_inertial_par[7];
  d_A_feas_tmp_tmp = this->robot_dim[3] * this->robot_inertial_par[4] *
                     this->robot_inertial_par[9];
  e_A_feas_tmp = d_A_feas_tmp_tmp * t3;
  f_A_feas_tmp = d_A_feas_tmp_tmp * t7;
  d_A_feas_tmp_tmp = this->robot_inertial_par[4] * this->robot_dim[4] *
                     this->robot_inertial_par[9];
  g_A_feas_tmp = d_A_feas_tmp_tmp * t2;
  h_A_feas_tmp = d_A_feas_tmp_tmp * t6;
  i_A_feas_tmp = c_A_feas_tmp * t2 * t3;
  c_A_feas_tmp = c_A_feas_tmp * t6 * t7;
  j_A_feas_tmp = d_A_feas_tmp * t2 * t3;
  d_A_feas_tmp = d_A_feas_tmp * t6 * t7;
  k_A_feas_tmp = e_A_feas_tmp * t8 * t13;
  e_A_feas_tmp = e_A_feas_tmp * t9 * t12;
  l_A_feas_tmp = f_A_feas_tmp * t8 * t9;
  f_A_feas_tmp = f_A_feas_tmp * t12 * t13;
  A_feas[3] =
      (((((((((((((((((((((((((this->robot_inertial_par[11] * -2.0 -
                               this->robot_inertial_par[13] * 2.0) -
                              this->robot_inertial_par[14]) +
                             t22) +
                            t30) +
                           t31) -
                          this->robot_inertial_par[0] *
                              ((((((((-t32 - t34) -
                                     A_feas_tmp_tmp *
                                         std::sin(phi_r - this->robot_dim[6])) +
                                    b_A_feas_tmp_tmp * t33 * 2.0) +
                                   c_A_feas_tmp_tmp * t33 * 2.0) +
                                  A_feas_tmp_tmp_tmp * t26 * 2.0) +
                                 t25 * t33 * 2.0) +
                                t32_tmp * t33) +
                               t34_tmp * t33 * 2.0)) -
                         this->robot_inertial_par[6] * t19 * 2.0) -
                        this->robot_inertial_par[8] * t15 * 2.0) -
                       this->robot_inertial_par[8] * t17 * 2.0) -
                      this->robot_inertial_par[8] * t20 * 2.0) -
                     this->robot_inertial_par[9] * t20) -
                    this->robot_inertial_par[7] * t20 * 2.0) -
                   this->robot_inertial_par[4] * this->robot_inertial_par[4] *
                       this->robot_inertial_par[9]) -
                  this->robot_dim[0] * this->robot_dim[4] *
                      this->robot_inertial_par[8] * 4.0) -
                 A_feas_tmp * t4 * t6 * 4.0) -
                A_feas_tmp * t2 * t10 * 4.0) -
               b_A_feas_tmp * t4 * t6 * 4.0) -
              b_A_feas_tmp * t2 * t10 * 4.0) +
             i_A_feas_tmp * 2.0) -
            c_A_feas_tmp * 2.0) +
           j_A_feas_tmp * 4.0) -
          d_A_feas_tmp * 4.0) +
         k_A_feas_tmp * 2.0) +
        e_A_feas_tmp * 2.0) +
       l_A_feas_tmp * 2.0) +
      ((((f_A_feas_tmp * -2.0 - g_A_feas_tmp * t8 * t13 * 2.0) -
         g_A_feas_tmp * t9 * t12 * 2.0) +
        h_A_feas_tmp * t8 * t9 * 2.0) -
       h_A_feas_tmp * t12 * t13 * 2.0);
  A_feas_tmp = h1 * this->robot_dim[4];
  b_A_feas_tmp = h1 * this->robot_inertial_par[8];
  g_A_feas_tmp = h1 * this->robot_dim[0];
  h_A_feas_tmp =
      g_A_feas_tmp * this->robot_inertial_par[3] * this->robot_inertial_par[8];
  m_A_feas_tmp = h2 * this->robot_dim[0] * this->robot_inertial_par[3] *
                 this->robot_inertial_par[8];
  n_A_feas_tmp = h2 * this->robot_inertial_par[3];
  o_A_feas_tmp = h1 * this->robot_inertial_par[3] * this->robot_dim[4] *
                 this->robot_inertial_par[8];
  p_A_feas_tmp =
      n_A_feas_tmp * this->robot_dim[4] * this->robot_inertial_par[8];
  t32_tmp = h1 * this->robot_dim[3] * this->robot_dim[4] *
            this->robot_inertial_par[9];
  t34_tmp = h1 * this->robot_inertial_par[1] * this->robot_dim[4] *
            this->robot_inertial_par[7];
  A_feas_tmp_tmp = h1 * this->robot_inertial_par[4] * this->robot_dim[4] *
                   this->robot_inertial_par[9];
  b_A_feas_tmp_tmp = A_feas_tmp_tmp * t2;
  t25 = A_feas_tmp_tmp * t6;
  A_feas[4] =
      ((((((((((((((((((((((((((t22 + t30) + t31) +
                              this->robot_inertial_par[11] * h1 * 2.0) -
                             this->robot_inertial_par[13] * h2 * 2.0) +
                            this->robot_inertial_par[0] *
                                (((((((t32 + t34) +
                                      g_A_feas_tmp *
                                          this->robot_inertial_par[8] * t33 *
                                          2.0) +
                                     h1 * this->robot_inertial_par[2] *
                                         this->robot_inertial_par[6] * t33 *
                                         2.0) -
                                    n_A_feas_tmp * this->robot_inertial_par[8] *
                                        t26 * 2.0) +
                                   A_feas_tmp * this->robot_inertial_par[8] *
                                       t33 * 2.0) +
                                  A_feas_tmp * this->robot_inertial_par[9] *
                                      t33) +
                                 A_feas_tmp * this->robot_inertial_par[7] *
                                     t33 * 2.0)) +
                           h1 * this->robot_inertial_par[6] * t19 * 2.0) +
                          b_A_feas_tmp * t15 * 2.0) -
                         h2 * this->robot_inertial_par[8] * t17 * 2.0) +
                        b_A_feas_tmp * t20 * 2.0) +
                       h1 * this->robot_inertial_par[9] * t20) +
                      h1 * this->robot_inertial_par[7] * t20 * 2.0) +
                     g_A_feas_tmp * this->robot_dim[4] *
                         this->robot_inertial_par[8] * 4.0) +
                    i_A_feas_tmp) -
                   c_A_feas_tmp) +
                  j_A_feas_tmp * 2.0) -
                 d_A_feas_tmp * 2.0) +
                k_A_feas_tmp) +
               e_A_feas_tmp) +
              l_A_feas_tmp) -
             f_A_feas_tmp) +
            h_A_feas_tmp * t4 * t6 * 2.0) -
           m_A_feas_tmp * t4 * t6 * 2.0) +
          h_A_feas_tmp * t2 * t10 * 2.0) -
         m_A_feas_tmp * t2 * t10 * 2.0) +
        o_A_feas_tmp * t4 * t6 * 2.0) -
       p_A_feas_tmp * t4 * t6 * 2.0) +
      (((((((((o_A_feas_tmp * t2 * t10 * 2.0 - p_A_feas_tmp * t2 * t10 * 2.0) -
              t32_tmp * t2 * t3) +
             t32_tmp * t6 * t7) -
            t34_tmp * t2 * t3 * 2.0) +
           t34_tmp * t6 * t7 * 2.0) +
          b_A_feas_tmp_tmp * t8 * t13) +
         b_A_feas_tmp_tmp * t9 * t12) -
        t25 * t8 * t9) +
       t25 * t12 * t13);
  A_feas[5] = 0.0;
  A_feas[6] = 0.0;
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::ModelController()
{
  static const double dv[15]{0.06,
                             0.128,
                             0.22749999999999998,
                             0.118,
                             0.0363,
                             0.3,
                             0.29484,
                             0.165888,
                             0.152928,
                             10.0,
                             0.001,
                             0.0050866042499999988,
                             0.000905969664,
                             0.00070978982399999991,
                             0.1};
  static const double dv1[7]{
      0.1, 0.145, 0.236, 0.256, 0.355, 0.78539816339744828, 2.5132741228718345};
  for (int i{0}; i < 7; i++) {
    this->robot_dim[i] = dv1[i];
  }
  std::copy(&dv[0], &dv[15], &this->robot_inertial_par[0]);
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::~ModelController()
{
  // (no terminate code required)
}

//
// File trailer for ModelController.cpp
//
// [EOF]
//
