//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: ModelController.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 06-Aug-2021 08:56:14
//

// Include Files
#include "ModelController.h"
#include <algorithm>
#include <cmath>

// Function Definitions
//
// J_COMV_TOT_REL_WHEEL_CALC
//     J_COMV_TOT_REL_WHEEL =
//     J_COMV_TOT_REL_WHEEL_CALC(ALPHA,BETA,GAMMA,H1,H2,L_A,L_D,L_CM_C,L_CM_D,L_CM_AH,L_CM_BODY,L_H,M_AH,M_C,M_BODY,M_D,M_W,PHI_R,THETA_ST,THETA_ST_BODY)
//
// Arguments    : double alpha
//                double b_gamma
//                double h1
//                double h2
//                double phi_r
//                double beta
//                double J_CoMv_tot_rel_wheel[10]
// Return Type  : void
//
void ModelController::J_CoMv_tot_rel_wheel_calc(double alpha, double b_gamma,
                                                double h1, double h2,
                                                double phi_r, double beta,
                                                double J_CoMv_tot_rel_wheel[10])
{
  double J_CoMv_tot_rel_wheel_tmp;
  double t11;
  double t12;
  double t14;
  double t15;
  double t17;
  double t18;
  double t19;
  double t2;
  double t20;
  double t21;
  double t25;
  double t26;
  double t28;
  double t3;
  double t4;
  double t5;
  double t7;
  double t8;
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     31-Jul-2021 14:08:50
  t2 = this->robot_dim[0] + this->robot_dim[4];
  t3 = this->robot_inertial_par[6] * 2.0;
  t4 = this->robot_inertial_par[8] * 2.0;
  t5 = this->robot_inertial_par[7] * 2.0;
  t7 = (beta + phi_r) + this->robot_dim[5];
  t8 = (b_gamma + phi_r) + this->robot_dim[5];
  t11 = std::cos(t7);
  t12 = std::cos(t8);
  t7 = std::sin(t7);
  t14 = std::sin(t8);
  t15 = phi_r + -this->robot_dim[6];
  t8 = (phi_r + -alpha) + this->robot_dim[5];
  t17 = this->robot_dim[3] * t11;
  t18 = this->robot_inertial_par[1] * t11;
  t19 = this->robot_dim[3] * t7;
  t20 = this->robot_inertial_par[1] * t7;
  t21 = std::cos(t8);
  t11 = std::sin(t8);
  t28 = 1.0 / ((((this->robot_inertial_par[9] + t3) + t4) + t5) +
               this->robot_inertial_par[5] * 2.0);
  t7 = this->robot_dim[4] * t21;
  t8 = this->robot_dim[4] * t11;
  t25 = h1 * t7;
  t26 = h1 * t8;
  J_CoMv_tot_rel_wheel[0] = 0.0;
  J_CoMv_tot_rel_wheel[1] = 0.0;
  J_CoMv_tot_rel_wheel[2] = 0.0;
  J_CoMv_tot_rel_wheel[3] = 0.0;
  J_CoMv_tot_rel_wheel[4] = 0.0;
  J_CoMv_tot_rel_wheel[5] = 0.0;
  J_CoMv_tot_rel_wheel_tmp = this->robot_inertial_par[2] * t3;
  J_CoMv_tot_rel_wheel[6] =
      t28 * (((this->robot_inertial_par[9] *
                   ((t17 - t7) + this->robot_inertial_par[4] * std::sin(t15)) +
               t5 * (t18 - t7)) -
              t4 * (this->robot_inertial_par[3] * t14 + t2 * t21)) -
             J_CoMv_tot_rel_wheel_tmp * t21);
  J_CoMv_tot_rel_wheel[7] =
      -t28 *
      (((this->robot_inertial_par[9] *
             ((-t19 + t8) + this->robot_inertial_par[4] * std::cos(t15)) -
         t5 * (t20 - t8)) -
        t4 * (this->robot_inertial_par[3] * t12 - t2 * t11)) +
       J_CoMv_tot_rel_wheel_tmp * t11);
  J_CoMv_tot_rel_wheel_tmp = h2 * this->robot_inertial_par[3];
  t8 = h1 * t2;
  t7 = h1 * this->robot_inertial_par[2] * t3;
  J_CoMv_tot_rel_wheel[8] =
      t28 * (((this->robot_inertial_par[9] * (t17 + t25) + t5 * (t18 + t25)) -
              this->robot_inertial_par[8] *
                  (J_CoMv_tot_rel_wheel_tmp * t14 - t8 * t21) * 2.0) +
             t7 * t21);
  J_CoMv_tot_rel_wheel[9] =
      t28 * (((this->robot_inertial_par[9] * (t19 + t26) + t5 * (t20 + t26)) +
              t4 * (J_CoMv_tot_rel_wheel_tmp * t12 + t8 * t11)) +
             t7 * t11);
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::ModelController()
{
  static const double dv1[18]{0.1,
                              0.145,
                              0.236,
                              0.256,
                              0.355,
                              -1.0,
                              0.0,
                              0.78539816339744828,
                              2.5132741228718345,
                              0.53376787572416418,
                              0.048333333333333332,
                              0.58800260354756761,
                              -0.58800260354756761,
                              -2.5535900500422253,
                              2.5535900500422253,
                              1.2566370614359172,
                              0.21749999999999997,
                              0.145};
  static const double dv[15]{0.06,
                             0.128,
                             0.22749999999999998,
                             0.118,
                             0.0363,
                             0.3,
                             0.29484,
                             0.165888,
                             0.152928,
                             10.0,
                             0.001,
                             0.0050866042499999988,
                             0.000905969664,
                             0.00070978982399999991,
                             0.1};
  std::copy(&dv[0], &dv[15], &this->robot_inertial_par[0]);
  std::copy(&dv1[0], &dv1[18], &this->robot_dim[0]);
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::~ModelController()
{
  // (no terminate code required)
}

//
// File trailer for ModelController.cpp
//
// [EOF]
//
