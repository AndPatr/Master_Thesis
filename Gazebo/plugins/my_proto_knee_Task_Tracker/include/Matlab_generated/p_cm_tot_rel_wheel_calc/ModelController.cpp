//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: ModelController.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 11-Aug-2021 12:59:32
//

// Include Files
#include "ModelController.h"
#include <algorithm>
#include <cmath>

// Function Definitions
//
// Arguments    : void
// Return Type  : void
//
ModelController::ModelController()
{
  static const double dv[15]{0.06,
                             0.128,
                             0.22749999999999998,
                             0.118,
                             0.0363,
                             0.3,
                             0.29484,
                             0.165888,
                             0.152928,
                             10.0,
                             0.001,
                             0.0050866042499999988,
                             0.000905969664,
                             0.00070978982399999991,
                             0.1};
  static const double dv1[7]{
      0.1, 0.145, 0.236, 0.256, 0.355, 0.78539816339744828, 2.5132741228718345};
  std::copy(&dv[0], &dv[15], &this->robot_inertial_par[0]);
  for (int i{0}; i < 7; i++) {
    this->robot_dim[i] = dv1[i];
  }
}

//
// Arguments    : void
// Return Type  : void
//
ModelController::~ModelController()
{
  // (no terminate code required)
}

//
// P_CM_TOT_REL_WHEEL_CALC
//     P_CM_TOT_REL_WHEEL =
//     P_CM_TOT_REL_WHEEL_CALC(ALPHA,BETA,GAMMA,L_A,L_D,L_CM_C,L_CM_D,L_CM_AH,L_CM_BODY,L_H,M_AH,M_C,M_BODY,M_D,M_W,PHI_R,THETA_ST,THETA_ST_BODY)
//
// Arguments    : double alpha
//                double b_gamma
//                double phi_r
//                double beta
//                double p_cm_tot_rel_wheel[2]
// Return Type  : void
//
void ModelController::p_cm_tot_rel_wheel_calc(double alpha, double b_gamma,
                                              double phi_r, double beta,
                                              double p_cm_tot_rel_wheel[2])
{
  double b_p_cm_tot_rel_wheel_tmp;
  double c_p_cm_tot_rel_wheel_tmp;
  double d_p_cm_tot_rel_wheel_tmp;
  double e_p_cm_tot_rel_wheel_tmp;
  double p_cm_tot_rel_wheel_tmp;
  double t10;
  double t11;
  double t12;
  double t14;
  double t15;
  double t17;
  double t2;
  double t3;
  double t4;
  double t6;
  double t7;
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     11-Aug-2021 12:49:02
  t2 = this->robot_inertial_par[6] * 2.0;
  t3 = this->robot_inertial_par[8] * 2.0;
  t4 = this->robot_inertial_par[7] * 2.0;
  t6 = (beta + phi_r) + this->robot_dim[5];
  t7 = (b_gamma + phi_r) + this->robot_dim[5];
  t10 = std::cos(t6);
  t11 = std::sin(t6);
  t12 = phi_r + -this->robot_dim[6];
  t6 = (phi_r + -alpha) + this->robot_dim[5];
  t14 = std::cos(t6);
  t15 = std::sin(t6);
  t17 = 1.0 / ((((this->robot_inertial_par[9] + t2) + t3) + t4) +
               this->robot_inertial_par[5] * 2.0);
  p_cm_tot_rel_wheel_tmp = this->robot_dim[3] * this->robot_inertial_par[9];
  b_p_cm_tot_rel_wheel_tmp =
      this->robot_inertial_par[1] * this->robot_inertial_par[7];
  c_p_cm_tot_rel_wheel_tmp = this->robot_dim[4] * this->robot_inertial_par[9];
  d_p_cm_tot_rel_wheel_tmp = this->robot_dim[0] * t3;
  t2 *= this->robot_inertial_par[2];
  e_p_cm_tot_rel_wheel_tmp = this->robot_dim[4] * t3;
  t6 = this->robot_dim[4] * t4;
  p_cm_tot_rel_wheel[0] =
      -t17 * ((((((((this->robot_inertial_par[3] * this->robot_inertial_par[8] *
                         std::cos(t7) * -2.0 +
                     this->robot_inertial_par[4] * this->robot_inertial_par[9] *
                         std::cos(t12)) -
                    p_cm_tot_rel_wheel_tmp * t11) -
                   b_p_cm_tot_rel_wheel_tmp * t11 * 2.0) +
                  c_p_cm_tot_rel_wheel_tmp * t15) +
                 d_p_cm_tot_rel_wheel_tmp * t15) +
                t2 * t15) +
               e_p_cm_tot_rel_wheel_tmp * t15) +
              t6 * t15);
  p_cm_tot_rel_wheel[1] =
      t17 * ((((((((-this->robot_inertial_par[4] * this->robot_inertial_par[9] *
                        std::sin(t12) +
                    this->robot_inertial_par[3] * t3 * std::sin(t7)) -
                   p_cm_tot_rel_wheel_tmp * t10) -
                  b_p_cm_tot_rel_wheel_tmp * t10 * 2.0) +
                 c_p_cm_tot_rel_wheel_tmp * t14) +
                d_p_cm_tot_rel_wheel_tmp * t14) +
               t2 * t14) +
              e_p_cm_tot_rel_wheel_tmp * t14) +
             t6 * t14);
}

//
// File trailer for ModelController.cpp
//
// [EOF]
//
